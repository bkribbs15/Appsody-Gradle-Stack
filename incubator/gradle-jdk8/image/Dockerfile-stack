FROM adoptopenjdk:8-jdk-hotspot

CMD ["gradle"]

ENV GRADLE_HOME /opt/gradle

RUN set -o errexit -o nounset \
    && echo "Adding gradle user and group" \
    && groupadd --system --gid 1000 gradle \
    && useradd --system --gid gradle --uid 1000 --shell /bin/bash --create-home gradle \
    && mkdir /home/gradle/.gradle \
    && chown --recursive gradle:gradle /home/gradle \
    \
    && echo "Symlinking root Gradle cache to gradle Gradle cache" \
    && ln -s /home/gradle/.gradle /root/.gradle

VOLUME /home/gradle/.gradle

WORKDIR /home/gradle

RUN apt-get update \
    && apt-get install --yes --no-install-recommends \
        fontconfig \
        unzip \
        wget \
        \
        bzr \
        git \
        git-lfs \
        mercurial \
        openssh-client \
        subversion \
    && rm -rf /var/lib/apt/lists/*

ENV GRADLE_VERSION 5.6.4

## APPSODY STUFF
# See https://appsody.dev/docs/stacks/environment-variables for more information about each variable.

# Mount the application directory into the container filesystem, for example
ENV APPSODY_MOUNTS=/:/project/userapp
ENV APPSODY_PROJECT_DIR="/project"

# Define a volume for dependencies to be stored between runs, for example
ENV APPSODY_DEPS=/project/deps

# Directories to watch for changes in
ENV APPSODY_WATCH_DIR=/project/userapp

# Directories to ignore changes in
ENV APPSODY_WATCH_IGNORE_DIR= 

# Types of file that will trigger a re-launch (change this to be specific to your application).
ENV APPSODY_WATCH_REGEX="^.*.sh$"

# Optional command executed before RUN/TEST/DEBUG - typically used to install any dependencies from
# the user application

ENV APPSODY_PREP=

# Configurations for appsody run
# APPSODY_RUN should specify the command to launch your application
# APPSODY_RUN_ON_CHANGE should specify the command to re-launch your application if triggered by a file change
# APPSODY_RUN_KILL Signals whether to kill the server process before starting the APPSODY_RUN_ON_CHANGE action
# name of the executable
##

#/project/gradlew build && java -jar build/libs/$APPSODY_JAVA_JAR

ENV APPSODY_RUN="/project/gradlew build && cp build/libs/project.jar ./app.jar && java -jar ./app.jar"
ENV APPSODY_RUN_ON_CHANGE=$APPSODY_RUN
ENV APPSODY_RUN_KILL=false

# Configurations for appsody debug
# APPSODY_DEBUG should specify the command to launch your application in debug mode
# APPSODY_DEBUG_ON_CHANGE should specify the command to re-launch your application in debug mode if triggered by a file change
# APPSODY_DEBUG_KILL Signals whether to kill the server process before starting the APPSODY_DEBUG_ON_CHANGE action

ENV APPSODY_DEBUG="echo -n \"Debugging \"; /bin/bash /project/userapp/hello.sh"
ENV APPSODY_DEBUG_ON_CHANGE=$APPSODY_DEBUG
ENV APPSODY_DEBUG_KILL=false

# Configurations for appsody test
# APPSODY_TEST should specify the command to launch your application in test mode
# APPSODY_TEST_ON_CHANGE should specify the command to re-launch your application in test mode if triggered by a file change
# APPSODY_TEST_KILL Signals whether to kill the server process before starting the APPSODY_TEST_ON_CHANGE action

ENV APPSODY_TEST="/project/userapp/tests/test.sh"
ENV APPSODY_TEST_ON_CHANGE=$APPSODY_TEST
ENV APPSODY_TEST_KILL=false

# Copy the common components across into your stack filesystem (most stacks will need these)
COPY ./LICENSE /licenses/
COPY ./project /project
COPY ./config /config

# Set the working directory to the project directory, which typically contains the stack components and userapp
WORKDIR /project

# Expose the relevant ports (change this to be specific to your application).
# EXPOSE $APPSODY_PORT
# update Dockerfile

##
ENV DOCKER_IMAGE="gradle-build"
RUN sed -i -e "s|{{DOCKER_IMAGE}}|${GRADLE_VERSION}-gradle-build|" /project/Dockerfile
##

CMD ["/bin/bash"]